defmodule Cmplx do
  def new(r, i) do
    {r, i}
  end
  def add({a ,b}, {x, y}) do
    {(a+x),(b+y)}
  end
  def sqr({a, b}) do
    {a*a - b*b, 2*a*b}
  end
  def abs({a, b}) do
    :math.sqrt(a*a + b*b)
  end
end

defmodule Brot do
  def mandelbrot(c, m) do
    z0 = Cmplx.new(0, 0)
    i = 0
    test(i, z0, c, m)
  end
  def test(m, _, _, m) do 0 end
  def test(i, zn, c, m) do
    val = Cmplx.add(Cmplx.sqr(zn), c)
    abs = Cmplx.abs(zn)
    if(abs > 2) do i
    else test(i+1, val, c, m)
    end
  end
end

defmodule PPM do

  # write(name, image) The image is a list of rows, each row a list of
  # tuples {R,G,B}. The RGB values are 0-255.

  def write(name, image) do
    height = length(image)
    width = length(List.first(image))
    {:ok, fd} = File.open(name, [:write])
    IO.puts(fd, "P6")
    IO.puts(fd, "#generated by ppm.ex")
    IO.puts(fd, "#{width} #{height}")
    IO.puts(fd, "255")
    rows(image, fd)
    File.close(fd)
  end

  defp rows(rows, fd) do
    Enum.each(rows, fn(r) ->
      colors = row(r)
      IO.write(fd, colors)
    end)
  end

  defp row(row) do
    List.foldr(row, [], fn({:rgb, r, g, b}, a) ->
      [r, g, b | a]
    end)
  end

end

defmodule Color do
  def convert(depth, max) do
    fraction = depth / max
    a = fraction * 4 #from 0 to 4
    x = Kernel.trunc(a)     #x is 0,1,2,3,4
    y = Kernel.trunc(255 * (a - x))#y is 0 255

    case x do
      0 -> {:rgb, y, 0, 0}          # black -> red
      1 -> {:rgb, 255, y, 0}        # red -> yellow
      2 -> {:rgb, 255 - y, 255, 0}  # yellow -> green
      3 -> {:rgb, 0, 255, y}        # green -> cyan
      4 -> {:rgb, 0, 255 - y, 255}  # cyan -> blue
    end
  end
end

defmodule Mandel do
  def mandelbrot(width, height, x, y, k, depth) do
    trans = fn(w, h) -> Cmplx.new(x + k * (w - 1), y - k * (h - 1)) end
    rows(width, height, trans, depth, [])
  end
  def rows(_, 0, _, _, rows) do rows end
  def rows(width, height, trans, depth, rows) do
    rows(width, height - 1, trans, depth, [row(width, height, trans, depth, []) | rows])
  end
  def row(0, _, _ ,_, row) do row end
  def row(w, h, tr, depth, row) do
    c = tr.(w, h);
    num = Brot.mandelbrot(c, depth);
    color = Color.convert(num, depth);
    row(w - 1, h, tr, depth, [color | row])
  end

  def demo() do
    small(-2.6, 1.2, 1.2)
  end
  def small(x0, y0, xn) do
    width = 960
    height = 540
    depth = 64
    k = (xn - x0) / width
    image = Mandel.mandelbrot(width, height, x0, y0, k, depth)
    PPM.write("small.ppm", image)
  end
end
